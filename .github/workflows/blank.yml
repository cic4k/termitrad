# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main", "epic/*", "feature/*" ]
  pull_request:
    branches: [ "main", "epic/*", "feature/*"  ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  static_analysis:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - name: Set up Python 3.10.7
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10.7"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi


      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.1.13
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: cache poetry install
        uses: actions/cache@v3
        id: cached-poetry-dependencies
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        working-directory: .
        run: poetry install
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

      # Runs a set of commands using the runners shell
      - name: Pylint
        run: |
          find . -name '*.py' -exec pylint --fail-under=8 {} \;

      - name: flake8
        run: |
          poetry run flake8 . --max-line-length=89
